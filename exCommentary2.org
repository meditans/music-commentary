* Second installment
  Here is the second installment in the series which explores the
  functioning of the music-suite library. Here is the code we wrote
  last time:

#+BEGIN_SRC haskell
import Music.Prelude

permittedMelodicIntervals :: [Interval]
permittedMelodicIntervals = [ perfect unison, major second, minor second
                            , major third,    minor third,  perfect fourth
                            , perfect fifth,  major sixth,  minor sixth
                            , perfect octave]

type CounterpointVoice = Aligned (Voice Pitch)

cantus :: CounterpointVoice 
cantus = [d, a, g, f, e, d, f, e, d] ^. voice . to (aligned 0 0)

render :: CounterpointVoice -> Score StandardNote
render = fmap (fromPitch' . pure) . renderAlignedVoice 

action :: IO ()
action = writeLilypond "cantus.ly" $ render cantus
#+END_SRC
  
So, our final goal is to write a counterpoint over a cantus firmus and
check their mutual relationship, in a generic way (ie. a way that will
work when we will begin to write exercices in three parts).  We begin
here by representing an exercise.

** Two Parts First Species Counterpoint
   Last time, we used counterpointVoice to model a voice. Let's model
   a two parts first species counterpoint. For musical theoretical
   reasons, we want to distinguish the position of the cantus with
   respect to that of the counterpoint itself. The first design that
   comes in mind is:

#+BEGIN_SRC haskell
  -- Two parts first species counterpoint
  data TPFSC = TPFSC { topVoice :: CounterpointVoice
                     , bottomVoice :: CounterpointVoice
                     } deriving (Eq, Show)
#+END_SRC

   Here arises a problem. The Eq deriving is incorrect, as the program
   doesn't know how to derive the Eq instance for CounterpointVoice.
   Why is this? We know that:

   #+BEGIN_EXAMPLE
   counterpointVoice = Aligned (Voice Pitch)
   #+END_EXAMPLE

   So, let's look at =Eq= instance for =Aligned=. Ok, there isn't one
   (there is the =Show= one, however). Is that necessary by design?
   For now, let's remove the =Eq= instance, however. Let's also
   include a smart constructor for counterpoints to concentrate on the
   pitches, without worrying about the plumbing.
   
   #+BEGIN_QUOTE
   The missing Eq instance has now been added. /HH
   #+END_QUOTE

   
#+BEGIN_SRC haskell
data TPFSC = TPFSC { _cantusFirmus :: CounterpointVoice
                   , _counterpoint :: CounterpointVoice
                   } deriving (Show)

makeLenses ''TPFSC

tpfsc :: [Note Pitch] -> [Note Pitch] -> TPFSC
tpfsc a b = TPFSC
  { _counterpoint = a ^. voice . to (aligned 0 0)
  , _cantusFirmus = b ^. voice . to (aligned 0 0)
  }
#+END_SRC
   
   With this, we can write:

#+BEGIN_SRC haskell
example :: TPFSC
example = TPFSC
  { _cantusFirmus = [d, a, g, f, e, d, f, e, d] ^. voice . to (aligned 0 0)
  , _counterpoint = (_8va [d, c, e, f, g, f, d, cs, d]) ^. voice . to (aligned 0 0)
  }

example' :: TPFSC
example' = tpfsc [d, a, g, f, e, d, f, e, d] (_8va [d, c, e, f, g, f, d, cs, d])
#+END_SRC

   
** Getters to access the upper and lower voices

   Two check that the rules of simple counterpoint hold, we have two
   needs:
   1) Being able to distinguish the upper from the lower voice. 
   2) Being able to distinguish the cantus firmus from the counterpoint
      exercise.

   Now, the cantus/counterpoint information is stored in the data
   itself, so let's think how to access the upper/lower voice.

   How do we know which voice is higher? It suffices to check the
   first note (as we're not permitting voice overlapping).  After a
   bit of thougth, I think I have two possibilities:

   - Using a getter :: this solution is totally correct, but I have
        the downside of not being able to change the upper part, if I
        want.
   - Using a misbehaved lens :: (It's misbehaved because I could
        modify the upper voice transforming it into wht lower one) I
        generally don't like to break laws in my code, but this could
        give me the possibility of changing the last note of the upper
        part.

   As I find the possibility to change something in the upper part not
   so tremendously useful, I'll make a getter (id est, a function xd).

#+BEGIN_SRC haskell
upperVoice :: TPFSC -> CounterpointVoice
upperVoice c = if c^.cantusFirmus.firstNote >= c^.counterpoint.firstNote
               then c^.cantusFirmus
               else c^.counterpoint
    where
      firstNote :: Lens' CounterpointVoice Pitch
      firstNote = undefined 
#+END_SRC
   
   Now, the point is, I want to write the lens firstNote, so first
   thing would be to read inside the Aligned constructor. In the
   documentation of aligned, I don't seem to find a lens doing that.

   This is a difficulty that I encounter often while toying with the
   library: often there is a constructor, which lets me create an
   object, and I'm unable to locate easily the corresponding
   destructor (or, eventually, the getter).

   Oh, there is something that converts an =Aligned (Voice a)= to a
   =Score a=. So, let's see if I can read with a lens inside of a
   =Score a=. It seems that I can read an =Event a= which exposes an
   iso to =(Span, a)=. So, after that Iso, and _2, I'm getting the
   Pitch. Let's verify this intuition in ghci.

   #+BEGIN_EXAMPLE
   ghci> :t cantus ^?! (to renderAlignedVoice . events . traverse . from event . _2)
   cantus ^?! (to renderAlignedVoice . events . traverse . from event . _2) :: Pitch

   ghci> cantus ^?! (to renderAlignedVoice . events . traverse . from event . _2)
   d
   #+END_EXAMPLE

   However, this process, while possible, should in my opinion be streamlined.
   
   #+BEGIN_QUOTE
   Note that you can't really make a *lens* from a voice (aligned or not) to its first element, as
   there might not be one (the voice may be empty!). In contrast to the Prelude, the lens API does
   not throw exceptions of empty values, so the distinction between lenses and prisms/traversals
   is important.
   
   If you are just interested in the first element, you can use =_head= rather than =traverse=, which
   gives you a prism (i.e. a traversal of 0 or 1 elements) to the head, rather than a traversal to
   all elements.
   
   You could also use =pitch= instead of =from event . _2= (or =eventee= if you are dealing with some
   non-aspect type). That would give you =(to renderAlignedVoice.events._head.pitch :: Traversal CounterpointVoice Pitch)=.
   #+END_QUOTE
   
   So, in the end:

#+BEGIN_SRC haskell
upperVoice :: TPFSC -> CounterpointVoice
upperVoice c = if c^?!cantusFirmus.firstNote >= c^?!counterpoint.firstNote
               then c^.cantusFirmus
               else c^.counterpoint
    where
      firstNote = to renderAlignedVoice . events . traverse . from event . _2

lowerVoice :: TPFSC -> CounterpointVoice
lowerVoice c = if c^?!cantusFirmus.firstNote >= c^?!counterpoint.firstNote
               then c^.counterpoint
               else c^.cantusFirmus
    where
      firstNote = to renderAlignedVoice . events . traverse . from event . _2
#+END_SRC


** Rendering a simple realization of a counterpoint exercise
   So, let's write a simple realization of the cantus firmus.

   #+BEGIN_SRC haskell
   example = TPFSC
    { _cantusFirmus = [d, a, g, f, e, d, f, e, d] ^. voice . to (aligned 0 0)
    , _counterpoint = [d', a, g, f, e, d, f, e, d] ^. voice . to (aligned 0 0)
    }
   #+END_SRC

   Now, let's move towards the rendering of this exercise. Now, the
   difficulty is the fact that we used the function
   =renderAlignedVoice=, which has type =Aligned (Voice Pitch) ->
   Score Pitch=. How do we extend this to the two voices?
   
   Let's explore the =Aligned= module. Nothing. Ok, can we merge two
   =Score Pitch=? Well, it's an istance of monoid, and I do not see
   other merge function on first sight, so let's try:

#+BEGIN_SRC haskell
renderTPFSC :: TPFSC -> IO ()
renderTPFSC es = writeLilypond "composto.ly" $
                               (render . upperVoice $ es) <> (render . lowerVoice $ es)
#+END_SRC
   
   Ok, that was good, but we have both voices in the same
   pentagram. Now, I'd like to be able to split the exercise using two
   pentagrams. For that, I'm going to check the documentation. In fact
   this is well expressed in the docs. The point is the =</>=
   operator, so:

#+BEGIN_SRC haskell
renderTPFSC :: TPFSC -> IO ()
renderTPFSC es = writeLilypond "composto.ly" $
                               (render . upperVoice $ es) </> (render . lowerVoice $ es)
#+END_SRC


** Changing clefs and instrument name
   We now have only to change the default keys, using the module
   =Music.Score.Meta.Clef=. My first try is:

#+BEGIN_SRC haskell
renderTPFSCWithClef :: TPFSC -> IO ()
renderTPFSCWithClef es = writeLilypond "composto.ly" $
                               (render . upperVoice $ es) </> (render . clef CClef . lowerVoice $ es)
#+END_SRC

   Argh, it doesn't work, and the docs have a TODO marked for an
   example :P. I think this is because =CounterpointVoice = Aligned
   (Voice Pitch)= lacks a =HasMeta= instance. But =Score= does have
   one, so let's try:

#+BEGIN_SRC haskell
renderTPFSCWithClef :: TPFSC -> IO ()
renderTPFSCWithClef es = writeLilypond "composto.ly" $
                               (render . upperVoice $ es) </> clef CClef (render . lowerVoice $ es)
#+END_SRC

   Well, this does compile, but *the result is unchanged*. Why is this?
   What should I do to change the lower clef?

   To end this installment, I'll pose a question: how do I eliminate
   instruments annotations from the generated pdf? I wasn't able to
   find anything like that in the documentation.
